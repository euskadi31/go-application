// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package config

import (
	hcl "github.com/hashicorp/hcl/v2"
	mock "github.com/stretchr/testify/mock"
)

// MockParser is an autogenerated mock type for the Parser type
type MockParser struct {
	mock.Mock
}

// ConfigDirFiles provides a mock function with given fields: dir
func (_m *MockParser) ConfigDirFiles(dir string) ([]string, hcl.Diagnostics) {
	ret := _m.Called(dir)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(dir)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 hcl.Diagnostics
	if rf, ok := ret.Get(1).(func(string) hcl.Diagnostics); ok {
		r1 = rf(dir)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(hcl.Diagnostics)
		}
	}

	return r0, r1
}

// Context provides a mock function with given fields:
func (_m *MockParser) Context() *hcl.EvalContext {
	ret := _m.Called()

	var r0 *hcl.EvalContext
	if rf, ok := ret.Get(0).(func() *hcl.EvalContext); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcl.EvalContext)
		}
	}

	return r0
}

// IsConfigDir provides a mock function with given fields: path
func (_m *MockParser) IsConfigDir(path string) bool {
	ret := _m.Called(path)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LoadConfigDir provides a mock function with given fields: path
func (_m *MockParser) LoadConfigDir(path string) (*Config, hcl.Diagnostics) {
	ret := _m.Called(path)

	var r0 *Config
	if rf, ok := ret.Get(0).(func(string) *Config); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Config)
		}
	}

	var r1 hcl.Diagnostics
	if rf, ok := ret.Get(1).(func(string) hcl.Diagnostics); ok {
		r1 = rf(path)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(hcl.Diagnostics)
		}
	}

	return r0, r1
}

// LoadConfigFile provides a mock function with given fields: path
func (_m *MockParser) LoadConfigFile(path string) (*ConfigSchema, hcl.Diagnostics) {
	ret := _m.Called(path)

	var r0 *ConfigSchema
	if rf, ok := ret.Get(0).(func(string) *ConfigSchema); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ConfigSchema)
		}
	}

	var r1 hcl.Diagnostics
	if rf, ok := ret.Get(1).(func(string) hcl.Diagnostics); ok {
		r1 = rf(path)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(hcl.Diagnostics)
		}
	}

	return r0, r1
}

// Parse provides a mock function with given fields: filename, src
func (_m *MockParser) Parse(filename string, src []byte) (*ConfigSchema, hcl.Diagnostics) {
	ret := _m.Called(filename, src)

	var r0 *ConfigSchema
	if rf, ok := ret.Get(0).(func(string, []byte) *ConfigSchema); ok {
		r0 = rf(filename, src)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ConfigSchema)
		}
	}

	var r1 hcl.Diagnostics
	if rf, ok := ret.Get(1).(func(string, []byte) hcl.Diagnostics); ok {
		r1 = rf(filename, src)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(hcl.Diagnostics)
		}
	}

	return r0, r1
}
